1、线性结构
   1.1》顺序表
	 1.2》链表
	      头节点: head
				尾节点: next指针指向None
				空链表: 头节点为None的链表为空链表
	 1.3》栈
        顺序栈:使用顺序表的方式实现栈(LIFO)
				链式栈:使用链表的方式实现栈(LIFO)
				栈顶: 入栈、出栈
				栈底: 不进行任何操作
				空栈
	 1.4》队列
	      顺序队列:使用顺序表的方式实现队列(FIFO)
				链式队列:使用链表的方式实现队列(FIFO)
				队头:出队
				队尾:入队
				空队列
2、树的概念
   2.1》节点的度: 节点中子树的个数
	 2.2》树的度: 树中节点的最大的度
	 2.3》叶子节点: 度为0的节点
	 2.4》节点层次: 根开始为第1层,具体看节点在第几层
	 2.5》树的深度: 树中节点的最大层次

	 2.6》满二叉树
	      所有叶子节点都在最底层的完全二叉树
	 2.7》完全二叉树
	      除了最底层,其他各层节点均已达到最大值,
				最底层的节点从左向右紧密的排列
	 2.8》二叉排序树(二叉搜索树)
	      任何节点,左子树中所有节点的值均小于此节点值
				         右子树中所有节点的值均大于此节点值
				二叉搜索树中序遍历的结果是递增的序列
	 2.9》平衡二叉树
	      对于任何节点,子树的高度差不大于1

3、二叉树遍历
   3.1》广度遍历(层次遍历): 从上到下,从左到右
	 3.2》深度遍历
	      前序遍历(先序遍历): 根左右
				中序遍历: 左根右
				后序遍历: 左右根


给定一棵二叉树,获取此二叉树的镜像(递归思想尝试)

    源二叉树       镜像
		   1             1
		 2   3         3   2
	 4  5 6  7     7  6 5  4

def get_mirror(self, root):
  if not root:
	    return 

	root.left, root.right = root.right, root.left
	get_mirror(root.left)
	get_mirror(root.right)

4、排序算法 
   插入排序
	 选择排序
	 冒泡排序
	 希尔排序
	 归并排序
	 快速排序
	 ... ...

二分查找(折半查找)
[1,2,3,4,5,6,7,8,9,10]

重中之重：
1、二叉树遍历
2、归并排序
3、快速排序
4、二分查找


第五阶段(30个工作日左右)：
1、数据分析
   小姐姐老师: 杨洋

2、机器学习
3、深度学习
   王丹波、裴广战


1、后端开发(TTS赠送)
2、数据分析
3、爬虫
4、自动化测试(TTS赠送)
5、人工智能
6、自动化运维
   
刷面试题(该记就记,用自己的话稍微总结一下)

保持良好的心态
千万不要被面试官蹂躏你的自信
